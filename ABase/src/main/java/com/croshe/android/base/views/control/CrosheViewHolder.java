package com.croshe.android.base.views.control;import android.content.Context;import android.support.v7.widget.RecyclerView;import android.text.Html;import android.view.View;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;import com.bumptech.glide.request.RequestOptions;import com.croshe.android.base.R;import com.croshe.android.base.extend.glide.GlideApp;import com.croshe.android.base.views.CornerTransform;/** * 安徽创息软件科技有限公司-技术支持  http://www.croshe.com * Created by Janesen on 2017/6/25. */public class CrosheViewHolder {    public static CrosheViewHolder build(View view) {        CrosheViewHolder crosheSuperView = new CrosheViewHolder();        crosheSuperView.setView(view);        crosheSuperView.context = view.getContext();        return crosheSuperView;    }    public Context context;    private View view;    private boolean isSticky;//是否固定到头部    private String stickyKey;    private int fixIndex;//常驻索引    private RecyclerView.Adapter adapter;    private int adapterPosition;    private RecyclerView.ViewHolder superHolder;    private CrosheViewHolder() {    }    public View getItemView() {        return view;    }    public void setView(View view) {        this.view = view;    }    /**     * 根据ID获得控件     *     * @param id     * @param <T>     * @return     */    public <T> T getView(int id) {        return (T) view.findViewById(id);    }    public <T> T findViewById(int id) {        return (T) view.findViewById(id);    }    public TextView setTextView(int viewId, Object content) {        TextView textView = getView(viewId);        if (content == null || textView == null) {            return textView;        }        if (content instanceof CharSequence) {            CharSequence charSequence = (CharSequence) content;            textView.setText(charSequence);        } else {            textView.setText(Html.fromHtml(String.valueOf(content)));        }        return textView;    }    public ImageView displayImage(int viewId, String url) {        return displayImage(viewId, url, -1, -1, -1);    }    public ImageView displayImage(int viewId, String url, int defaultImg) {        return displayImage(viewId, url, defaultImg, -1, -1);    }    public ImageView displayImage(int viewId, String url, int width, int height) {        return displayImage(viewId, url, -1, width, height);    }    public ImageView displayImage(ImageView imageView, String url) {        return displayImage(imageView, url, -1, -1, -1);    }    public ImageView displayCornerImgage(int viewId, String url, int radius) {        ImageView imageView = getView(viewId);        if (imageView == null) return null;        return displayCornerImage(imageView, url, radius, -1);    }    public ImageView displayCornerImgage(int viewId, String url, int radius, int defaultImg) {        ImageView imageView = getView(viewId);        if (imageView == null) return null;        return displayCornerImage(imageView, url, radius, defaultImg);    }    public ImageView displayImage(ImageView imageView, String url, int defaultImg, int width, int height) {        if (defaultImg == -1) {            defaultImg = R.drawable.android_base_default_img;        }        RequestOptions myOptions = new RequestOptions();        if (width > 0 && height > 0) {            myOptions = myOptions.override(width, height);        }        GlideApp.with(context.getApplicationContext())                .load(url)                .fitCenter()                .placeholder(defaultImg)                .error(defaultImg)                .fallback(defaultImg)                .apply(myOptions)                .into(imageView);        return imageView;    }    /**     * 加载圆角图片     */    public ImageView displayCornerImage(ImageView imageView, String url, int radius, int defaultImg) {        CornerTransform transform = new CornerTransform(imageView.getContext(), radius);        transform.setExceptCorner(false, false, false, false);        if (defaultImg == 0) {            defaultImg = R.drawable.android_base_default_img;        }        GlideApp.with(context.getApplicationContext())                .load(url)                .fitCenter()                .placeholder(defaultImg)                .error(defaultImg)                .fallback(defaultImg)                .transform(transform)                .skipMemoryCache(true)                .into(imageView);        return imageView;    }    public ImageView displayImage(int viewId, String url, int defaultImg, int width, int height) {        ImageView imageView = getView(viewId);        if (imageView == null) return null;        return displayImage(imageView, url, defaultImg, width, height);    }    public ImageView displayImage2(int viewId, String url) {        return displayImage(viewId, url);    }    public ImageView displayImage2(int viewId, String url, int defaultImageResource) {        return displayImage(viewId, url, defaultImageResource);    }    public ImageView displayImage(int viewId, int imageSource) {        ImageView imageView = getView(viewId);        if (imageView == null) return null;        imageView.setImageResource(imageSource);        return imageView;    }    public View onClick(int viewId, View.OnClickListener onClickListener) {        View view = getView(viewId);        if (view != null) {            view.setOnClickListener(onClickListener);        }        return view;    }    public CrosheViewHolder onLongClick(int viewId, View.OnLongClickListener onClickListener) {        View view = getView(viewId);        if (view != null) {            view.setOnLongClickListener(onClickListener);        }        return this;    }    public boolean isSticky() {        return isSticky;    }    public int getFixIndex() {        return fixIndex;    }    public void setFixIndex(int fixIndex) {        this.fixIndex = fixIndex;    }    public RecyclerView.Adapter getAdapter() {        return adapter;    }    public CrosheViewHolder setAdapter(RecyclerView.Adapter adapter) {        this.adapter = adapter;        return this;    }    public int getAdapterPosition() {        return adapterPosition;    }    public CrosheViewHolder setAdapterPosition(int adapterPosition) {        this.adapterPosition = adapterPosition;        return this;    }    public RecyclerView.ViewHolder getSuperHolder() {        return superHolder;    }    public CrosheViewHolder setSuperHolder(RecyclerView.ViewHolder superHolder) {        this.superHolder = superHolder;        return this;    }    /**     * 是否固定到头部     *     * @param sticky     * @return     */    public CrosheViewHolder setSticky(boolean sticky) {        setSticky(String.valueOf(System.currentTimeMillis()), sticky);        return this;    }    /**     * 是否固定到头部     *     * @param sticky     * @return     */    public CrosheViewHolder setSticky(String key, boolean sticky) {        this.isSticky = sticky;        this.stickyKey = key;        return this;    }    public <T> T setVisibility(int id, int visible) {        View view = findViewById(id);        if (view != null) {            view.setVisibility(visible);        }        return (T) view;    }    public void hideItemView() {        RecyclerView.LayoutParams param = (RecyclerView.LayoutParams) view.getLayoutParams();        view.setVisibility(View.GONE);        param.height = 0;        param.width = 0;        view.setLayoutParams(param);    }    public void showItemView() {        RecyclerView.LayoutParams param = (RecyclerView.LayoutParams) view.getLayoutParams();        param.height = LinearLayout.LayoutParams.WRAP_CONTENT;        param.width = LinearLayout.LayoutParams.MATCH_PARENT;        view.setVisibility(View.VISIBLE);        view.setLayoutParams(param);    }    public String getStickyKey() {        return stickyKey;    }    public void setStickyKey(String stickyKey) {        this.stickyKey = stickyKey;    }}